// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :one
insert into orders (updated_at, product_id, user_id)
values ($1, $2, $3) returning id, updated_at, product_id, user_id
`

type CreateOrderParams struct {
	UpdatedAt time.Time
	ProductID int32
	UserID    int32
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UpdatedAt, arg.ProductID, arg.UserID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.ProductID,
		&i.UserID,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
delete from orders where id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrders = `-- name: GetOrders :many
SELECT orders.id as order_id,
       products.name as product_name,
       products.serial as product_serial,
       users.first_name as user_name,
       users.last_name as user_last_name,
       orders.updated_at as updated_at
FROM orders
         JOIN products ON orders.product_id = products.id
         JOIN users ON orders.user_id = users.id
`

type GetOrdersRow struct {
	OrderID       int32
	ProductName   string
	ProductSerial sql.NullString
	UserName      string
	UserLastName  sql.NullString
	UpdatedAt     time.Time
}

func (q *Queries) GetOrders(ctx context.Context) ([]GetOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersRow
	for rows.Next() {
		var i GetOrdersRow
		if err := rows.Scan(
			&i.OrderID,
			&i.ProductName,
			&i.ProductSerial,
			&i.UserName,
			&i.UserLastName,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
update orders set product_id=$1, user_id=$2, updated_at=$3
where id = $4 returning id, updated_at, product_id, user_id
`

type UpdateOrderParams struct {
	ProductID int32
	UserID    int32
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.ProductID,
		arg.UserID,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.ProductID,
		&i.UserID,
	)
	return i, err
}
