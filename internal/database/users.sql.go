// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
insert into users (first_name, last_name, updated_at)
values ($1, $2, $3) returning id, first_name, last_name, updated_at
`

type CreateUserParams struct {
	FirstName string
	LastName  sql.NullString
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FirstName, arg.LastName, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getOneUser = `-- name: GetOneUser :one
select id, first_name, last_name, updated_at from users where id = $1
`

func (q *Queries) GetOneUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getOneUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, first_name, last_name, updated_at from users
WHERE CASE WHEN LENGTH($1::text) != 0
    THEN first_name like $1::text ELSE TRUE END
  AND
    CASE WHEN LENGTH($2::text) != 0
      THEN last_name like $2::text ELSE TRUE END
ORDER BY
    CASE WHEN $3::text = 'asc' THEN
             CASE $4::text
                 WHEN 'first_name' THEN first_name
                 WHEN 'last_name' THEN last_name
                 ELSE NULL
                 END
         ELSE
             NULL
        END
        ASC,

    CASE WHEN $3::text = 'desc' THEN
             CASE $4::text
                 WHEN 'first_name' THEN first_name
                 WHEN 'last_name' THEN last_name
                 ELSE NULL
                 END
         ELSE
             NULL
        END
        DESC
limit $6 offset $5
`

type GetUsersParams struct {
	FName     string
	LName     string
	SortOrder string
	OrderBy   string
	Offset    sql.NullInt32
	Limit     sql.NullInt32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers,
		arg.FName,
		arg.LName,
		arg.SortOrder,
		arg.OrderBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
update users set first_name=$1, last_name=$2, updated_at=$3
where id = $4 returning id, first_name, last_name, updated_at
`

type UpdateUserParams struct {
	FirstName string
	LastName  sql.NullString
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
	)
	return i, err
}
